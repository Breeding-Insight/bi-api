openapi: 3.0.2
info:
  title: Breeding Insight API
  description: API documentation for Breeding Insight
  termsOfService: http://swagger.io/terms/
  contact:
    email: np398@cornell.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Breeding Insight
  url: http://www.breedinginsight.org
servers:
  - url: http://localhost:8081/bi/v1
tags:
  - name: users
    description: User Management
  - name: programs
    description: Program Management
paths:
  /users:
    get:
      tags:
        - users
      summary: Get list of all users in the system.
      description: Get list of all users
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersResponse'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 2
                    totalPages: 1
                  status: []
                result:
                  data:
                    - id: b2263532-1fa3-49a6-9a66-957f313c8ed6
                      orcid: 1234-4312-4352-6314
                      name: Bob Smith
                      email: bob.smith@mail.com
                      roles: []
                    - id: a2263532-1fa3-29a6-3a66-557f313c8ed6
                      orcid: 1234-4312-4352-6314
                      name: Fred Brown
                      email: null
                      roles: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
    post:
      tags:
        - users
      summary: Create user
      description: Create a new user.
      operationId: createUser
      requestBody:
        description: User information to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersResponse_1'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 1
                    totalPages: 1
                  status: []
                result:
                  id: d4f23375-0033-4d16-a62f-072e3a9198fa
                  orcid: null
                  name: Bob Smith
                  email: bob@bob.com
                  roles: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Email already exists
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user information
      description: Get a specific user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The id of the user information that needs to be fetched.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersResponse_1'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 1
                    totalPages: 1
                  status: []
                result:
                  id: d4f23375-0033-4d16-a62f-072e3a9198fa
                  orcid: 1111-2222-3333-4444
                  name: Bob Smith
                  email: bob@bob.com
                  roles: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
    put:
      tags:
        - users
      summary: Update user information
      description: Update user information with specified data.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of user to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUserRequest'
            example:
              name: Bob Smith
              email: bob@bob.com
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 1
                    totalPages: 1
                  status: []
                result:
                  id: d4f23375-0033-4d16-a62f-072e3a9198fa
                  orcid: 1111-2222-3333-4444
                  name: Bob Smith
                  email: bob@bob.com
                  roles: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
        "409":
          description: Conflict - Email Already Exists
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Email already exists
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: id of user to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found

  /programs:
    get:
      tags:
        - programs
      summary: Get list of all programs in the system.
      description: Get list of all programs
      operationId: getPrograms
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programsResponseResult'
              examples:
                programExample1:
                  $ref: '#/components/examples/arrayOfPrograms'

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action

    post:
      tags:
        - programs
      summary: Create program
      description: Create a new program.
      operationId: createProgram
      requestBody:
        description: Program information to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProgramRequest'
            examples:
              createProgramRequest:
                $ref: '#/components/examples/updateProgramRequestExample'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programsResponseSingle'
              examples:
                singleProgram:
                  $ref: '#/components/examples/singleProgram'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Email already exists
  /programs/{id}:
    get:
      tags:
        - programs
      summary: Get program information
      description: Get a specific program
      operationId: getProgramById
      parameters:
        - name: id
          in: path
          description: The id of the program information that needs to be fetched.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programsResponseSingle'
              examples:
                singleProgram:
                  $ref: '#/components/examples/singleProgram'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
    put:
      tags:
        - programs
      summary: Update program information
      description: Update program information with specified data.
      operationId: updateProgram
      parameters:
        - name: id
          in: path
          description: id of program to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated program object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProgramRequest'
            examples:
              updateProgramRequestExample:
                $ref: '#/components/examples/updateProgramRequestExample'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              examples:
                singleProgram:
                  $ref: '#/components/examples/singleProgram'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
        "409":
          description: Conflict - Email Already Exists
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Email already exists
  /programs/archive/{id}:
    delete:
      tags:
        - programs
      summary: Archive program
      description: Archives the indicated program
      operationId: deleteProgram
      parameters:
        - name: id
          in: path
          description: id of program to be archived
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found

  /programs/{id}/users:
    get:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program information that needs to be fetched.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Get list of all users in the specified program
      description: Get list of all users in program
      operationId: getProgramUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programUserResponseResult'
              examples:
                programUserExample1:
                  $ref: '#/components/examples/arrayOfProgramUsers'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
    post:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program information that needs to be fetched.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Create a user in specified program
      description: Add user to program if they exist in the system, otherwise create new user and add
      operationId: createProgramUser
      requestBody:
        description: User information to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newProgramUserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersResponse_1'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 1
                    totalPages: 1
                  status: []
                result:
                  id: d4f23375-0033-4d16-a62f-072e3a9198fa
                  orcid: null
                  name: Bob Smith
                  email: bob@bob.com
                  roles: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Email already exists

  /programs/{id}/users/{userId}:
    get:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program information that needs to be fetched.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: path
          description: The id of the user information that needs to be fetched.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Get specified user in the specified program
      description: Get user in the program
      operationId: getProgramUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersResponse_1'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 2
                    totalPages: 1
                  status: []
                result:
                  - id: b2263532-1fa3-49a6-9a66-957f313c8ed6
                    orcid: 1234-4312-4352-6314
                    name: Bob Smith
                    email: bob.smith@mail.com
                    roles: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
    put:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program information that needs to be updated.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: path
          description: The id of the user information that needs to be updated.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Update specified user in the specified program
      description: Update user in the program
      operationId: putProgramUser
      requestBody:
        description: Program user information to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newProgramUserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersResponse_1'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 2
                    totalPages: 1
                  status: []
                result:
                  - id: b2263532-1fa3-49a6-9a66-957f313c8ed6
                    orcid: 1234-4312-4352-6314
                    name: Bob Smith
                    email: bob.smith@mail.com
                    roles: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
    delete:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: path
          description: The id of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Remove user from the specified program
      description: Remove user from the specified program
      operationId: deleteProgramUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersResponse_1'

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found

  /programs/{id}/locations:
    get:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Get list of all locations in the specified program
      description: Get list of all locations in program
      operationId: getProgramLocations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationsResponse'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 1
                    totalPages: 1
                  status: []
                result:
                  data:
                    - id:  d2263532-1fa3-49a6-9a66-957f313c8ed2
                      country_name:  United States of America
                      country_alpha_2_code:  US
                      country_alpha_3_code: USA
                      environment_type:  field
                      accessibility: public
                      topography:  valley
                      name: Nick's Field
                      abbreviation:  NF
                      coordinates: {
                        "geometry": {
                          "coordinates": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "type": "Point"
                        },
                        "type": "Feature"
                      }
                      coordinate_uncertainty:  0
                      coordinate_description:  Northwest corner of field
                      slope: 1
                      exposure: none
                      documentation_url: http://www.nick.com
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
    post:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Create a location in specified program
      description: Add location to program if they exist in the system, otherwise create new location and add
      operationId: createProgramLocation
      requestBody:
        description: Location information to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newProgramLocationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationsResponseResult'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 1
                    totalPages: 1
                  status: []
                result:
                  id:  d2263532-1fa3-49a6-9a66-957f313c8ed2
                  country_name:  United States of America
                  country_alpha_2_code:  US
                  country_alpha_3_code: USA
                  environment_type:  field
                  accessibility: public
                  topography:  valley
                  name: Nick's Field
                  abbreviation:  NF
                  coordinates: {
                    "geometry": {
                      "coordinates": [
                        -76.506042,
                        42.417373,
                        123
                      ],
                      "type": "Point"
                    },
                    "type": "Feature"
                  }
                  coordinate_uncertainty:  0
                  coordinate_description:  Northwest corner of field
                  slope: 1
                  exposure: none
                  documentation_url: http://www.nick.com
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Email already exists

  /programs/{id}/locations/{locationId}:
    get:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: locationId
          in: path
          description: The id of the location
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Get specified location in the specified program
      description: Get location in the program
      operationId: getProgramLocation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationsResponseResult'
              example:
                metadata:
                  datafiles: []
                  pagination:
                    currentPage: 0
                    pageSize: 1
                    totalCount: 1
                    totalPages: 1
                  status: []
                result:
                  - id:  d2263532-1fa3-49a6-9a66-957f313c8ed2
                    country_name:  United States of America
                    country_alpha_2_code:  US
                    country_alpha_3_code: USA
                    environment_type:  field
                    accessibility: public
                    topography:  valley
                    name: Nick's Field
                    abbreviation:  NF
                    coordinates: {
                      "geometry": {
                        "coordinates": [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        "type": "Point"
                      },
                      "type": "Feature"
                    }
                    coordinate_uncertainty:  0
                    coordinate_description:  Northwest corner of field
                    slope: 1
                    exposure: none
                    documentation_url: http://www.nick.com
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found

    delete:
      tags:
        - programs
      parameters:
        - name: id
          in: path
          description: The id of the program
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: locationId
          in: path
          description: The id of the location
          required: true
          style: simple
          explode: false
          schema:
            type: string
      summary: Remove location from the specified program
      description: Remove location from the specified program
      operationId: deleteProgramLocation
      responses:
        "200":
          description: OK

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
                token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission
                to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is
                not found

components:
  schemas:
    metadata:
      type: object
      properties:
        datafiles:
          type: array
          description: The datafiles key contains a list of file paths, which can
            be relative or complete URLs. These files contain additional information
            related to the returned object and can be retrieved by a subsequent call.
            The empty list should be returned if no additional data files are present.
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/metadata_pagination'
        status:
          type: array
          description: The status field contains a list of informational status messages
            from the server. If no status is reported, an empty list should be returned.
            See Error Reporting for more information.
          items:
            $ref: '#/components/schemas/status'
    status:
      required:
        - message
        - messageType
      type: object
      properties:
        message:
          type: string
          description: A short message concerning the status of this request/response
        messageType:
          type: string
          description: The logging level for the attached message
          enum:
            - DEBUG
            - ERROR
            - WARNING
            - INFO
    user:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
    role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        domain:
          type: string
    programUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        roles:
          type: array
          description: Array of roles
          items:
            $ref: '#/components/schemas/role'
    program:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        abbreviation:
          type: string
        objective:
          type: string
        documentation_url:
          type: string
        active:
          type: boolean
        createdAtUtc:
          type: string
          format: datetime
        updatedAtUtc:
          type: string
          format: datetime
        species:
          type: object
          properties:
            id:
              type: string
              format: uuid
            commonName:
              type: string
        createdByUser:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        updatedByUser:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
    location:
      type: object
      properties:
        id:
          type: string
          format: uuid
        country_name:
          type: string
        country_alpha_2_code:
          type: string
        country_alpha_3_code:
          type: string
        environment_type:
          type: string
        accessibility:
          type: string
        topography:
          type: string
        name:
          type: string
        abbreviation:
          type: string
        coordinates:
          type: string
          format: geojson
        coordinate_uncertainty:
          type: string
        coordinate_description:
          type: string
        slope:
          type: string
        exposure:
          type: string
        documentation_url:
          type: string
    newUserRequest:
      type: object
      properties:
        name:
          type: string
          description: name of this user
        email:
          type: string
          description: email address of this user
    newProgramUserRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              description: Id of user to assign to program
            name:
              type: string
              description: Name of the user
            email:
              type: string
              description: Email address of this user
          required:
            - id
        roles:
          type: array
          description: Array of roles
          items:
            $ref: '#/components/schemas/role'
      required:
        - user
        - roles
    newProgramLocationRequest:
      type: object
      properties:
        country_name:
          type: string
        country_alpha_2_code:
          type: string
        country_alpha_3_code:
          type: string
        environment_type:
          type: string
        accessibility:
          type: string
        topography:
          type: string
        name:
          type: string
        abbreviation:
          type: string
        coordinates:
          type: string
          format: geojson
        coordinate_uncertainty:
          type: string
        coordinate_description:
          type: string
        slope:
          type: string
        exposure:
          type: string
        documentation_url:
          type: string
    usersResponse:
      title: usersResponse
      required:
        - metadata
        - result
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/usersResponse_result'
    locationsResponse:
      title: locationsResponse
      required:
        - metadata
        - result
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/locationsResponseResult'

    updateProgramRequest:
      type: object
      properties:
        species:
          type: object
          properties:
            id:
              type: string
              description: Id of species to assign to program
            commonName:
              type: string
              description: Name of species
          required:
            - id
        name:
          type: string
          description: name of program
        abbreviation:
          type: string
          description: abbreviation for program name
        objective:
          type: string
          description: program objective
        documetation_url:
          type: string
          description: program documentation url
      required:
        - species
        - name

    programsResponse:
      title: programsResponse
      required:
        - metadata
        - result
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/programsResponseResult'
    programsResponseSingle:
      title: programsResponse
      required:
        - metadata
        - result
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/program'
    usersResponse_1:
      title: usersResponse
      required:
        - metadata
        - result
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/user'
    metadata_pagination:
      type: object
      properties:
        currentPage:
          type: integer
        pageSize:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer
      description: The pagination object is applicable only when the payload contains
        a "data" key. It describes the pagination of the data contained in the "data"
        array, as a way to identify which subset of data is being returned. Pages
        are zero indexed, so the first page will be page 0 (zero).
    usersResponse_result:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          description: Array of users
          items:
            $ref: '#/components/schemas/user'
    programUserResponseResult:
      type: object
      properties:
        data:
          type: array
          description: Array of program users
          items:
            $ref: '#/components/schemas/programUser'
    locationsResponseResult:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          description: Array of locations
          items:
            $ref: '#/components/schemas/location'
    programsResponseResult:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          description: Array of programs
          items:
            $ref: '#/components/schemas/program'
  responses:
    "400BadRequest":
      description: Bad Request
      content:
        application/json:
          schema:
            type: string
          example: |-
            ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object
            ERROR - 2018-10-08T20:15:11Z - Invalid query parameter
            ERROR - 2018-10-08T20:15:11Z - Required parameter is missing
    "401Unauthorized":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization
            token
    "403Forbidden":
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T20:15:11Z - User does not have permission to
            perform this action
    "404NotFound":
      description: Not Found
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is not
            found
  securitySchemes:
    orcid_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://sandbox.orcid.org/oauth/authorize
          scopes:
            write:bi: modify
            read:bi: read
    api_key:
      type: apiKey
      name: api_key
      in: header
  examples:
    arrayOfPrograms:
      value:
        metadata:
          datafiles: []
          pagination:
            currentPage: 0
            pageSize: 1
            totalCount: 2
            totalPages: 1
          status: []
        result:
          data:
            - id: b2263532-1fa3-49a6-9a66-957f313c8ed6
              name: Bob Smith's Breeding Program
              abbreviation: BSBP
              objective: To breed the best grapes in the world
              documentationUrl: http://www.bobsbestbreeding.com
              active: true
              createdAtUtc: "2020-03-09T09:57:35-04:00"
              updatedAtUtc: "2020-03-09T09:59:25-04:00"
              species:
                id: b3764582-e1ac-4c5c-85c4-b76bae0a18d2
                commonName: "Grape"
              createdByUser:
                id: e024a9be-98bf-4802-bec0-16bdf7343888
                name: Bob Smith
              updatedByUser:
                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243
                name: Stacy Stacktrace
            - id: e2263532-1fa3-49a6-9a66-957f313c8ed3
              name: Franks's Salmon
              abbreviation: FS
              objective: To breed the best salmon in the world
              documentation_url: http://www.franks.com
              active: true
              createdAtUtc: "2020-03-09T09:57:35-04:00"
              updatedAtUtc: "2020-03-09T09:59:25-04:00"
              species:
                id: 239b9ce5-bf72-412e-a456-42ecb2a621ec
                commonName: Salmon
              createdByUser:
                id: e024a9be-98bf-4802-bec0-16bdf7343888
                name: Bob Smith
              updatedByUser:
                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243
                name: Stacy Stacktrace
    singleProgram:
      value:
        metadata:
          datafiles: []
          pagination:
            currentPage: 0
            pageSize: 1
            totalCount: 1
            totalPages: 1
          status: []
        result:
          id: b2263532-1fa3-49a6-9a66-957f313c8ed6
          name: Bob Smith's Breeding Program
          abbreviation: BSBP
          objective: To breed the best grapes in the world
          documentationUrl: http://www.bobsbestbreeding.com
          active: true
          createdAtUtc: "2020-03-09T09:57:35-04:00"
          updatedAtUtc: "2020-03-09T09:59:25-04:00"
          species:
            id: b3764582-e1ac-4c5c-85c4-b76bae0a18d2
            commonName: "Grape"
          createdByUser:
            id: e024a9be-98bf-4802-bec0-16bdf7343888
            name: Bob Smith
          updatedByUser:
            id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243
            name: Stacy Stacktrace
    updateProgramRequestExample:
      value:
        species:
          id: f4f23375-0033-4d16-a62f-072e3a9198fs
          commonName: "Sweetpotato"
        name: Tim's program
        abbreviation: TP
        objective: To breed some good stuff
        documentationUrl: http://www.timsgoodstuff.com
    arrayOfProgramUsers:
      value:
        metadata:
          datafiles: []
          pagination:
            currentPage: 0
            pageSize: 1
            totalCount: 2
            totalPages: 1
          status: []
        result:
          data:
            - createdAt: "2020-03-09T09:57:35-04:00"
              updatedAt: "2020-03-09T09:57:35-04:00"
              createdByUser:
                id: e024a9be-98bf-4802-bec0-16bdf7343888
                name: Bob Smith
                email: bob@bob.com
              updatedByUser:
                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243
                name: Stacy Stacktrace
                email: stacy@stacy.com
              user:
                id: b2263532-1fa3-49a6-9a66-957f313c8ed6
                name: Bob Smith
                email: bob.smith@mail.com
              roles:
                - id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245
                  domain: Breeder
            - createdAt: "2020-04-09T09:57:35-04:00"
              updatedAt: "2020-04-09T09:57:35-04:00"
              createdByUser:
                id: e024a9be-98bf-4802-bec0-16bdf7343888
                name: Fred Smith
                email: fred@smith.com
              updatedByUser:
                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243
                name: Joe Dirt
                email: joe@dirt.com
              user:
                id: b2263532-1fa3-49a6-9a66-957f313c8ed6
                name: Tim Smith
                email: tim.smith@mail.com
              roles:
                - id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245
                  domain: Breeder


