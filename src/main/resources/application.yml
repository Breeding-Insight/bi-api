#
#    See the NOTICE file distributed with this work for additional information
#    regarding copyright ownership.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

micronaut:
  application:
    name: bi-api
    instance:
      id: ${random.shortuuid}
  server:
    port: ${API_INTERNAL_PORT:8081}
    cors:
      enabled: true
    thread-selection: AUTO
    multipart:
      enabled: true
      max-file-size: '100MB'
      mixed: true
      threshold: '10MB'
    max-request-size: '100MB'
  bi:
    api:
      version: v1
      run-scheduled-tasks: true
  security:
    enabled: true
    oauth2:
      enabled: true
      callback-uri: /sso/success{/provider}
      login-uri: /sso/start{/provider}
      default-provider: orcid
      clients:
        orcid:
          client-id: ${OAUTH_CLIENT_ID}
          client-secret: ${OAUTH_CLIENT_SECRET}
          scopes:
            - openid
            - /authenticate
          authorization:
            url: ${OAUTH_AUTH_URL:`https://sandbox.orcid.org/oauth/authorize`}
          token:
              url: ${OAUTH_TOKEN_URL:`https://sandbox.orcid.org/oauth/token`}
              auth-method: client-secret-post
          openid:
            issuer: ${OAUTH_OPENID_ISSUER:`https://sandbox.orcid.org`}
            jwks-uri: ${OAUTH_OPENID_JWKSURI:`https://sandbox.orcid.org/oauth/jwks`}
            user-info:
              url: ${OAUTH_OPENID_USERINFOURL:`https://sandbox.orcid.org/oauth/userinfo`}
      state:
        cookie:
          cookie-max-age: 10m
    token:
      jwt:
        enabled: true
        cookie:
          enabled: true
          cookie-name: phylo-token
          cookie-secure: ${JWT_SECURE:true}
          http-only: true
          cookie-domain: ${JWT_DOMAIN:localhost}
          login-success-target-url: ${web.login.success.url}
          login-failure-target-url: ${web.login.failure.url}
          logout-target-url: ${web.logout.url}
        bearer:
          enabled: true
        signatures:
          secret:
            generator:
              secret: ${JWT_SECRET}
              jws-algorithm: HS256
        generator:
          access-token:
            expiration: 43200
    api-token:
      jwt:
        generator:
          access-token-expiration: 28800
    endpoints:
      login:
        enabled: true
      logout:
        enabled: true
        get-allowed: true
        path: /logout
    authentication: cookie
jackson:
  date-format: yyyy-MM-dd'T'HH:mm:ssZ
  mapper:
    acceptCaseInsensitiveEnums: true
flyway:
  datasources:
    default:
      locations:
        - classpath:org/breedinginsight/db/migration
        - classpath:db/migration
      enabled: true
      placeholders:
        default-url: ${brapi.server.default-url}
        brapi-reference-source: ${brapi.server.reference-source}
      out-of-order: true
jooq:
  datasources:
    default:
      sql-dialect: 'POSTGRES'

datasources:
  default:
    url: jdbc:postgresql://${DB_SERVER:`localhost:5432`}/${DB_NAME:bidb}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    driverClassName: 'org.postgresql.Driver'
#
#api:
#  oauth:
#    user-search:
#      orcid:
#        url: ${oauth.user-search-url:`https://pub.sandbox.orcid.org/v2.1/search`}
#
web:
  base-url: ${WEB_BASE_URL:`http://localhost:8080`}
  cookies:
    login-redirect: redirect-login
    account-token: account-token
  login:
    success:
      url: ${web.base-url}/program-selection
    failure:
      url: ${web.base-url}/401
    error:
      url: ${web.base-url}?loginError=true
  logout:
    url: ${web.base-url}
  signup:
    url-timeout: 60m
    signup:
      url: ${web.base-url}/signup
    success:
      url: ${web.base-url}/account-success
    error:
      url: ${web.base-url}/account-error

brapi:
  server:
    default-url: ${BRAPI_DEFAULT_URL}
    # leave these for future but all point to default for now
    core-url: ${brapi.server.default-url}
    pheno-url: ${brapi.server.default-url}
    geno-url: ${brapi.server.default-url}
    reference-source: ${BRAPI_REFERENCE_SOURCE:breedinginsight.org}
  vendor-submission-enabled: ${BRAPI_VENDOR_SUBMISSION_ENABLED:false}
  vendor-check-frequency: ${BRAPI_VENDOR_CHECK_FREQUENCY:1d}
  vendors:
    dart:
      url: ${DART_VENDOR_URL:`https://test-server.brapi.org`}
      client-id: ${DART_CLIENT_ID:potato-salad}
      token: ${DART_TOKEN:YYYY}
  read-timeout: ${BRAPI_READ_TIMEOUT:10m}
  page-size: 1000
  search:
    wait-time: 1000
  post-group-size: ${POST_CHUNK_SIZE:1000}

email:
  relay-server:
    host: ${EMAIL_RELAY_HOST}
    port: ${EMAIL_RELAY_PORT}
    login: ${EMAIL_RELAY_LOGIN:null}
    password: ${EMAIL_RELAY_PASSWORD:null}
  from: ${EMAIL_FROM}

redisson:
  single-server-config:
    address: ${REDIS_URL:`redis://localhost:6379`}
    connect-timeout: ${REDIS_TIMEOUT:30s}
    ssl-enable-endpoint-identification: ${REDIS_SSL:false}
  threads: 16
  netty-threads: 32

gigwa:
  host: ${GIGWA_HOST}
  username: ${GIGWA_USER}
  password: ${GIGWA_PASSWORD}

aws:
  region: ${AWS_REGION:`us-east-1`}
  accessKeyId: ${AWS_ACCESS_KEY_ID}
  secretKey: ${AWS_SECRET_KEY}
  s3:
    region: ${aws.region}
    endpoint: ${AWS_S3_ENDPOINT:`https://s3.us-east-1.amazonaws.com`}
    buckets:
      genotype:
        bucket: ${AWS_GENO_BUCKET}
