/*
 * See the NOTICE file distributed with this work for additional information
 * regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.breedinginsight.brapps.importer.services.processors.experiment.appendoverwrite.factory.entity;

import org.brapi.client.v2.model.exceptions.ApiException;
import org.breedinginsight.brapps.importer.model.response.ImportObjectState;
import org.breedinginsight.services.exceptions.DoesNotExistException;
import org.breedinginsight.services.exceptions.MissingRequiredInfoException;
import org.breedinginsight.services.exceptions.UnprocessableEntityException;

import java.util.List;

/**
 * Interface for importing entities related to experiments using BrAPI service.
 */
public interface ExperimentImportEntity<T> {

    /**
     * Create new objects generated by the workflow in the BrAPI service.
     * @param members List of entities to be created
     * @return List of created entities
     * @throws ApiException if there is an issue with the API call
     */
    public List<T> brapiPost(List<T> members) throws ApiException, MissingRequiredInfoException, UnprocessableEntityException, DoesNotExistException;

    /**
     * Fetch objects required by the workflow from the BrAPI service.
     * @return List of fetched entities
     * @throws ApiException if there is an issue with the API call
     */
    public List<T> brapiRead() throws ApiException;

    /**
     * Commit objects changed by the workflow to the BrAPI service.
     * @param members List of entities to be updated
     * @param <U> Type of entities
     * @return List of updated entities
     * @throws ApiException if there is an issue with the API call
     * @throws IllegalArgumentException if method arguments are invalid
     */
    public <U> List<U> brapiPut(List<U> members) throws ApiException, IllegalArgumentException;

    /**
     * Remove objects created by the workflow from the BrAPI service.
     * @param members List of entities to be deleted
     * @param <U> Type of entities
     * @return true if deletion is successful, false otherwise
     * @throws ApiException if there is an issue with the API call
     */
    public <U> boolean brapiDelete(List<U> members) throws ApiException;

    /**
     * For workflow pending import objects of a given state, fetch deep copies of the objects from the BrAPI service.
     * @param status State of the objects
     * @return List of deep copies of entities
     * @throws ApiException if there is an issue with the API call
     */
    public List<T> getBrAPIState(ImportObjectState status) throws ApiException;

    /**
     * For workflow pending import objects of a given state, construct deep copies of the objects from the workflow context.
     * @param status State of the objects
     * @return List of deep copies of entities from workflow context
     */
    public List<T> copyWorkflowMembers(ImportObjectState status);

    /**
     * For objects in the workflow context, update any foreign-key fields with values generated by the BrAPI service.
     * @param members List of entities to be updated
     * @param <U> Type of entities
     */
    public <U> void updateWorkflow(List<U> members);

    /**
     * Populate the workflow context with objects needed by the workflow.
     * @param members List of entities to be initialized
     * @param <U> Type of entities
     */
    public <U> void initializeWorkflow(List<U> members);
}
